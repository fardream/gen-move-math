// Auto generated from gen-move-math
// https://github.com/fardream/gen-move-math
// Manual edit with caution.
// Arguments: {{.Args}}
// Version: {{.Version}}
module {{.Address}}::{{.ModuleName}} {
    use {{.Address}}::{{.DoubleWidthModule}};

    const E_OVERFLOW: u64 = 1001;
    // {{.TypeName}} is a decimal with {{.Decimal}} digits.
    // It represents a value of v*10^(-{{.Decimal}})
    struct {{.TypeName}} has copy, drop, store {
        value: {{.BaseTypeName}}
    }

    const MULTIPLIER: {{.BaseTypeName}} = {{.Multiplier}};
    const SQUARED_MULTIPLIER: {{.BaseTypeName}} = {{.SquaredMultiplier}};

    const DECIMAL: u8 = {{.Decimal}};

    fun pow(x: {{.BaseTypeName}}, p: u8): {{.BaseTypeName}} {
        if (p == 0) {
            1
        } else {
            let r: {{.BaseTypeName}} = 1;
            while (p > 0) {
                r = r * x;
            };

            r
        }
    }

    // get decimal
    public fun get_decimal(): u8 {
        DECIMAL
    }

    // new creates a new {{.TypeName}} equals digits / 10^decimal.
    // For example, 1.23 = new(123, 2), 1.230 = new(1230, 3).
    public fun new(digits: {{.BaseTypeName}}, decimal: u8): {{.TypeName}} {
        if (decimal > DECIMAL) {
            {{.TypeName}} {
                value: digits / pow(10{{.BaseTypeName}}, decimal - DECIMAL),
            }
        } else if (decimal == DECIMAL) {
            {{.TypeName}} {
                value: digits,
            }
        } else {
            {{.TypeName}} {
                value: digits * pow(10{{.BaseTypeName}}, DECIMAL - decimal),
            }
        }
    }

	// from_integer converts an integer to a decimal number.
    public fun from_integer(v: {{.BaseTypeName}}) : {{.TypeName}} {
        {{.TypeName}} {
            value: v * MULTIPLIER,
        }
    }

    public fun add(x:{{.TypeName}}, y: {{.TypeName}}): {{.TypeName}} {
        {{.TypeName}} {
            value: x.value + y.value,
        }
    }

    public fun subtract(x: {{.TypeName}}, y: {{.TypeName}}): {{.TypeName}} {
        {{.TypeName}} {
            value: x.value - y.value,
        }
    }

    public fun multiply(x: {{.TypeName}}, y: {{.TypeName}}): {{.TypeName}} {
        let (v, carry) = {{.DoubleWidthModule}}::underlying_mul_with_carry(x.value, y.value);
        let result = {{.DoubleWidthModule}}::divide({{.DoubleWidthModule}}::new(carry, v), {{.DoubleWidthModule}}::new(0, MULTIPLIER));
        assert!({{.DoubleWidthModule}}::hi(result) == 0, E_OVERFLOW);
        {{.TypeName}} {
            value: {{.DoubleWidthModule}}::lo(result),
        }
    }

    public fun divide(x: {{.TypeName}}, y: {{.TypeName}}): {{.TypeName}} {
        let y = {{.DoubleWidthModule}}::new(0, y.value);
        let (x,carry) = {{.DoubleWidthModule}}::underlying_mul_with_carry(x.value, MULTIPLIER);
        let x = {{.DoubleWidthModule}}::new(carry, x);
        let d = {{.DoubleWidthModule}}::divide(x, y);

        {{.TypeName}} {
            value: {{.DoubleWidthModule}}::lo(d),
        }
    }

    public fun divide_mod(x: {{.TypeName}}, y: {{.TypeName}}):({{.TypeName}}, {{.TypeName}}) {
        let d = divide(x, y);

        (d, subtract(x, multiply(d, y)))
    }

    public fun bitwise_and(x: {{.TypeName}}, y: {{.TypeName}}): {{.TypeName}} {
        {{.TypeName}} {
            value: x.value & y.value,
        }
    }

    public fun bitwise_or(x: {{.TypeName}}, y: {{.TypeName}}): {{.TypeName}} {
        {{.TypeName}} {
            value: x.value | y.value,
        }
    }

    public fun bitwise_xor(x: {{.TypeName}}, y: {{.TypeName}}): {{.TypeName}} {
        {{.TypeName}} {
            value: x.value ^ y.value,
        }
    }
{{ if .DoTest }}

    #[test]
    fun test_decimal{{.BaseWidth}}n{{.Decimal}}() {
        let x = from_integer(1);
        let y = from_integer(3);
        assert!(x.value == MULTIPLIER, (x.value as u64));
        assert!(y.value == MULTIPLIER * 3, (y.value as u64));
        let (d, m) = divide_mod(from_integer(1), from_integer(3));
        assert!(d.value == {{.Multiplier}}{{.BaseTypeName}}/3, (d.value as u64));
        assert!(m.value == 1, (m.value as u64));
    }
{{end}}}
